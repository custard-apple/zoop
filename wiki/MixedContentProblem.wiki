#summary The problem of mixing domain logic with presentation logic.
#labels Phase-Requirements

= Introduction =

One of the biggest problems with much of the PHP software out there is that it does not adhere to the [ModelViewController MVC paradigm].  That is, it does not separate out the domain logic (the data model) from the presentation or display logic (the view or user interface).  This page is about how to separate out the display logic from the domain logic. 


= Details =

So, to separate your display logic from the rest of your application you generally use a [http://en.wikipedia.org/wiki/Web_template_system web templating system].  The templating system we chose for Zoop is called [http://smarty.php.net Smarty].  The idea is basically this:  You put all of your HTML into a separate file.  Then you pass in the variables needed to display the dynamic content for that page.  You access those variables through special tags that are specific to the template engine.  Smarty tags are by default delimited with {}.  See the below examples:

== Simple Example ==

=== Bad: Without a templating system ===
{{{
<?
echo "Hello world!";
?>
}}}

=== Good: With a templating system ===
_hello.php_
{{{
<?
include("Smarty.class.php");
$message = "Hello world!";
$template = new Smarty();
$template->assign('message', $message);
$template->display('hello.tpl');
?>
}}}

_hello.tpl_
{{{
<html>
  <body>
    {$message}
  </body>
</html>
}}}

Add in a more complex example with multiple pages showing why it is important to use MVC.
Also show how we extend it with the gui class.




